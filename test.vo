struct a {
    a: i32 = 0;
    b: i32 = 0;
    c: i32 = 0;
};

func test(self: a) u8 {
    printf("%i\n", self.a);
    printf("%i\n", self.a);
    printf("%i\n", self.a);
};

union b {
    a: i32;
    b: u32;
};

enum c {
    p = 0,
    q,
    r
};

tuple d { i32, u32 };

func native main() i32 {
    printf("haha\n");

    if b: static *i32 = null; 1 {
        printf("hehe\n");
    } else if c: i32 = 1; 2 {
        printf("hehe\n");
    } else if 3 {
        printf("hehe\n");
    }
    
    switch a, x: i32, i32 = 0, -2; a {
    label start:
        if case 0:; x++ < 0x0 {
    case 1:  printf("hahaha\n");
    case 2:  printf("hahaha\n");
    case 3:  printf("hahaha\n");
    default: goto start;
        }
    }

    for p: i32 = 0; p != 10; ++p {
        printf("%i\n", p);
    }

    a: *u8 = new u8(0);  
    printf("%u\n", *a);
    delete a;

    test: [10]func() u8;
    test: func() *u8;
    test: *func(*u8, [10]u8) u8;
    test: func() [10]u8;

    v: a = (a){0};

    return 0;
};