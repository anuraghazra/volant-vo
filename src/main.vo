import "io.vo";

import "compiler/tokens.vo";
import "compiler/lexer.vo";
import "compiler/ast.vo";
import "compiler/parser.vo";
import "compiler/analyzer.vo";
import "compiler/compiler.vo";

func print(v: *void, str: *i8, len: u32){
	// io.println("\n/*_______Chunk recieved_______*/");
	io.printn(str, len);
	// io.println("\n/*_____________end____________*/");
};

func main() i32 {	
	fp: *$FILE = $fopen("./test.vo", "r");

	if fp == null {
		io.println("fp is null");
		return 1;
	}
	
	stuff := (vec i8){};

	for c: i32 = $fgetc(fp); c != $EOF; c = $fgetc(fp) {
		stuff.push(cast(i8)c);
	}
	stuff.push(0);
	$fclose(fp);
	
	p := parser.NewParser((lexer.Lexer){buff: stuff.raw});
	a := analyzer.NewAnalyzer();
	c := compiler.NewCompiler(0, print, null);
	
	start: $timeval;
	end: $timeval;

	$gettimeofday(&start, null);
	c.file(a.file(p.file()));
	$gettimeofday(&end, null);

	time := ((cast(u64)end.tv_sec - cast(u64)start.tv_sec) * 1000000) + (cast(u64)end.tv_usec - cast(u64)start.tv_usec);

	$printf("\n// time taken: %lluus.\n", time);
	return 0;
};
